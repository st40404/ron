# turtlebot3
	git clone https://github.com/ROBOTIS-GIT/turtlebot3_msgs.git
	git clone https://github.com/ROBOTIS-GIT/turtlebot3.git
    git clone https://github.com/ROBOTIS-GIT/turtlebot3_simulations.git

# gmapping
    # algorithm
    git clone https://github.com/ros-perception/slam_gmapping.git
    # dependency
    git clone https://github.com/ros-perception/openslam_gmapping

# lidar driver
    git clone https://github.com/ros-drivers/urg_node.git

# realsense 
    # driver
    git clone https://github.com/intel-ros/realsense.git
    # dependency
    git clone https://github.com/pal-robotics/ddynamic_reconfigure.git

# ORBSLAM2
    # Pangolin
    git clone https://github.com/zzx2GH/Pangolin.git
    # ORBSLAM2
    git clone https://github.com/BoomFan/ORB_SLAM2.git


# UKF (now is trying UKF by user informramiz and shazraz)
    # informramiz
    git clone https://github.com/informramiz/Unscented-Kalman-Filter.git
    # shazraz
    git clone https://github.com/shazraz/Unscented-Kalman-Filter.git

# gazebo env
    # bookstore
    git clone https://github.com/aws-robotics/aws-robomaker-bookstore-world.git
    # small warehouse
    git clone https://github.com/aws-robotics/aws-robomaker-small-warehouse-world.git



# TB3 setting (in docker)
    ############## TB3 ############
    ## USB port permission problem
    ## ( when roslaunch tb3 driver and lidar driver )
    sudo chmod 777 /dev/ttyACM0
    sudo chmod 777 /dev/ttyACM1
    ## Because I doesn't set stable port 
    ## so after give the power
    ## give tb3 USB port signal first, and give lidar power  
     
# Real test of TB3
    ## TB3 driver
    roslaunch turtlebot3_bringup turtlebot3_core.launch
    ## lidar driver
    roslaunch urg_node urg_lidar.launch
    ## SLAM 
    ## (you can choose SLAM method 
    ## in slam_gmapping/gmapping/src/slam_gmapping.cpp)
    ## in laserCallback class, change the value of int mymethod
    roslaunch turtlebot3_slam turtlebot3_slam.launch 
    ## Control TB3 motor
    roslaunch turtlebot3_teleop turtlebot3_teleop_key.launch

    
# setting (in docker)
    ############## ORBSLAM2 ############
    ## install Pangolin
        #### open file CMakeList.txt in Pagolin/src
        #### delete the following code 

        find_package(FFMPEG QUIET)
        if(BUILD_PANGOLIN_VIDEO AND FFMPEG_FOUND)
        set(HAVE_FFMPEG 1)
        list(APPEND INTERNAL_INC  ${FFMPEG_INCLUDE_DIRS} )
        list(APPEND LINK_LIBS ${FFMPEG_LIBRARIES} )
        list(APPEND HEADERS ${INCDIR}/video/drivers/ffmpeg.h)
        list(APPEND SOURCES video/drivers/ffmpeg.cpp)
        message(STATUS "ffmpeg Found and Enabled")
        endif()
        
        #### build Pangolin
        cd Pangolin
        mkdir build
        cd build
        cmake ..
        make
        sudo make install
    
    ## install ORBSLAM2 dependency
        #### usleep(3000) Bug
        #### add following title in ORB_SLAM2/include/System.h
        
        #include <unistd.h> 
        
        #### build thirdparty library
        cd ORB_SLAM2
        chmod +x build.sh
        ./build.sh

        #### build Example/ROS/ORB_SLAM2 (original), 
        #### in our pkg, we combine with catkin_make
        # chmod +x build_ros.sh
        # ./build_ros.sh
        
        ## if build build_ros.sh have problem,
        ## check ~/.bashrc about export ROS_PATH_PACKAGE is correct,
        ## and source ~/.bashrc
        ## if it still have problem, execute following command

        sudo rosdep fix-permissions
        rosdep update

    #### set camera dataset
    # put  src/ORB_SLAM2/Vocabulary/ORBvoc.txt to  src/ORB_SLAM2/Examples/ROS/ORB_SLAM2/data/
    # set your camera calibration setting associations.txt, TUM3.yaml and two folder => dapth, rgb
    ## and put them to src/ORB_SLAM2/Examples/ROS/ORB_SLAM2/data/

    ## remove rgb, depths folder, and make rgb and depth folder
        cd ~/*ws/src/Make-ORB-SLAM2-RGBD-dataset        
        rm -rf rgb depths 
        mkdir rgb depths

    ## delete the original rgb and depth file
        rm rgb.txt depth.txt associations.txt

    ## install pyrealsense2
        pip2 install pyrealsense2

    ## execute rs-get-Sequence.py to get data and png, and put into rgb and depth folder
    ## press s to start, and ctrl+c to terminate
        python rs-get-Sequence.py 
    ## and you can get image in rgb and depth folder, rgb.txt and depth.txt

    ## combine rgb.txt and depth.txt by associate.py
        python associate.py --rgb_path rgb.txt --depth_path depth.txt --output associations.txt
    ## put rgb folder, depth folder, and associations.txt to ./Examples/ROS/ORB_SLAM2/data

    ## copy TUM3.yaml from /ORB_SLAM2/Examples/RGB-D to ORB_SLAM2/Examples/ROS/ORB_SLAM2/data
    
    ## and set your TUM3.yaml data
        cd ~/orb_slam2/src/ORB_SLAM2/Examples/ROS/ORB_SLAM2/data
        cp ../../../RGB-D/TUM3.yaml ./TUM3.yaml

        ## open realsense and get info
        roslaunch realsense2_camera rs_rgbd.launch 
        rostopic echo /camera/color/camera_info

        ## you can get in following param from camera_info
        ## K:[x1, x2, x3, y1, y2, y3, z1, z2, z3]
            Camera.fx : x1
            Camera.fy : y2 
            Camera.cx : x3
            Camera.cy : y3

        Camera.k1: 0.0
        Camera.k2: 0.0
        Camera.p1: 0.0
        Camera.p2: 0.0

        Camera.width: 1280
        Camera.height: 720

        ## get the other data from realsense webside
            # Camera frames per second 
            Camera.fps: 30.0

            # IR projector baseline times fx (aprox.)
            Camera.bf: 46.1

            # Color order of the images (0: BGR, 1: RGB. It is ignored if images are grayscale)
            Camera.RGB: 1

            # Close/Far threshold. Baseline times.
            ThDepth: 40.0

            # Deptmap values factor
            DepthMapFactor: 1000.0
        #--------------------------------------------------------------------------------------------
        # ORB Parameters
        #--------------------------------------------------------------------------------------------

        # ORB Extractor: Number of features per image
        ORBextractor.nFeatures: 500

        # ORB Extractor: Scale factor between levels in the scale pyramid 	
        ORBextractor.scaleFactor: 1.2

        # ORB Extractor: Number of levels in the scale pyramid	
        ORBextractor.nLevels: 8

        # ORB Extractor: Fast threshold
        # Image is divided in a grid. At each cell FAST are extracted imposing a minimum response.
        # Firstly we impose iniThFAST. If no corners are detected we impose a lower value minThFAST
        # You can lower these values if your images have low contrast			
        ORBextractor.iniThFAST: 20
        ORBextractor.minThFAST: 7

        #--------------------------------------------------------------------------------------------
        # Viewer Parameters
        #--------------------------------------------------------------------------------------------
        Viewer.KeyFrameSize: 0.05
        Viewer.KeyFrameLineWidth: 1
        Viewer.GraphLineWidth: 0.9
        Viewer.PointSize:2
        Viewer.CameraSize: 0.08
        Viewer.CameraLineWidth: 3
        Viewer.ViewpointX: 0
        Viewer.ViewpointY: -0.7
        Viewer.ViewpointZ: -1.8
        Viewer.ViewpointF: 500




# make my own rosbag in sim
# need to record following topic
    /scan 
    /camera/depth/image_raw
    /camera/rgb/image_raw
    /odom
    /joint_states 

# open gazebo
    roslaunch turtlebot3_gazebo turblebot3_bookstore.launch

# rosbag record 
    rosbag record -O sim_bag /scan /odom /tf /camera/depth/image_raw /camera/rgb/image_raw

    rosbag record -b 1024 /scan /odom /tf /camera/depth/image_raw /camera/rgb/image_raw

    ## use RAM to storage, but almost two min
    rosbag record -b 0 /scan /odom /tf /camera/depth/image_raw /camera/rgb/image_raw

# play rosbag
    ## use sim time, but I write in turtlebot3_slam.launch
    rosparam set use_sim_time true

    ## ROS will now get time from the bag 
    rosbag play --clock sim_bag.bag

    ## or write rosbag play in launch
    <node pkg="rosbag" type="play" name="player" output="screen" args="--clock $(find savebag)/bag/sim_bag.bag"/>

    ## adjust rosbag play speed, to make lidar SLAM can calculate
    rosbag play -r 0.3 --clock src/savebag/bag/sim_bag.bag 

# execute sequence
    orbslam2 >> rosbag >> gmapping_slam








# use my pkg from github(ubuntu)
    # make workspace and git clone pkg
        mkdir -p fusion_ws/src
        cd fusion_ws/src
        git clone https://github.com/st40404/FusionSLAM.git
        git clone https://github.com/aws-robotics/aws-robomaker-bookstore-world.git

        git clone https://github.com/aws-robotics/aws-robomaker-small-warehouse-world.git

        mv FusionSLAM/* .
        mv FusionSLAM/.git/ .
        rm -rf FusionSLAM/
        cd docker
        ./build.sh
        ./run.sh

# use my pkg from github(docker)
    # set env of docker
        # install Pangolin and build ORBSLAM2
            cd src/Pangolin/build/
            sudo make install
            cd ../../ORB_SLAM2/
            ./build.sh 
            cd ../..
            catkin_make

    # set ORBSLAM2 param
        cp -r src/all_process/other_data/data/ src/ORB_SLAM2/Examples/ROS/ORB_SLAM2/

        cp src/ORB_SLAM2/Vocabulary/ORBvoc.txt src/ORB_SLAM2/Examples/ROS/ORB_SLAM2/data/

    # set gazebo env
        rm src/aws-robomaker-bookstore-world/worlds/bookstore.world 

        cp src/all_process/other_data/bookstore.world src/aws-robomaker-bookstore-world/worlds/
    
    # record your bag
        roslaunch turtlebot3_gazebo turtlebot3_bookstore.launch

        rosbag record -b 0 /scan /odom /tf /camera/depth/image_raw /camera/rgb/image_raw

        # change bag name as short_test.bag, and put into savebag/bag folder
        mkdir src/savebag/bag
        mv xxxxxx.bag src/savebag/bag

        



# everytime when you rebuild your docker env,
# you need to do following command in docker
    ## can't build build.sh problem : without install Pangolin problem
    cd ~/work/src/Pangolin/build
    sudo make install 

# give lidar permission
# everytime usb signal sequence is tb3->lidar->camera

    sudo chmod 777 /dev/ttyACM0
    sudo chmod 777 /dev/ttyACM1

# if you can't open Gazebo in docker
# add following code in src/docker/run.sh
# in function docker_run()
    --gpus all \